local storage = require("openmw.storage")
local self = require("openmw.self")
local types = require("openmw.types")

local playerSettings = storage.globalSection("SettingsDebugMode")
local util = require("openmw.util")
local core = require("openmw.core")
local I = require("openmw.interfaces")
local badInv = nil
local badWait = -1
local nearby = require("openmw.nearby")

local currentAIState = 0

local homePosition = nil
local homeCellName = nil

local targetObject = nil
local targetPosition = nil

local AIStates = {
    Wander = 0,
    GatherPlants = 1,
    FollowPlayer = 2,
    AttackActor = 3,
    FindLoot = 4,
    TravelHome = 5,
    Wait = 6,

}
local function findValidPlants()
    local plantList = {}
    for index, cont in ipairs(nearby.containers) do
        if (types.Container.capacity(cont) == 0) then
            local ingCount = types.Container.content(cont):getAll(types.Ingredient)
            if (#ingCount > 0) then
                table.insert(plantList, cont)
                --      print(cont.recordId)
            else
                cont:sendEvent("initCont")
            end
        end
    end
    return plantList
end

local function distanceBetweenPos(vector1, vector2)
    --Quick way to find out the distance between two vectors.
    --Very similar to getdistance in mwscript
    local dx = vector2.x - vector1.x
    local dy = vector2.y - vector1.y
    local dz = vector2.z - vector1.z
    return math.sqrt(dx * dx + dy * dy + dz * dz)
end

local function findNextPlant()
    local plantList = findValidPlants()
    local myPos = self.position
    local closestPlant = nil
    local closestDistance = 3000 -- Set initial distance to a large value

    for index, plant in ipairs(plantList) do
        local plantPos = plant.position
        local distToPlant = distanceBetweenPos(plantPos, myPos)

        if distToPlant < closestDistance then
            closestDistance = distToPlant
            closestPlant = plant
        end
    end

    return closestPlant
end
local function findPosByOnNavMesh(toPosition, startPosition)
    --Finds the last position on a path generated by nearby.findPath.
    local ret = util.vector3(0, 0, 0)
    local result, table = nearby.findPath(startPosition, toPosition)
    for _, staticEntry in ipairs(table) do ret = staticEntry end

    return ret
end
local tempAction = nil
local tempActionEnd = 0


local function onUpdate(dt)
    local playerFlying = types.Actor.activeEffects(nearby.players[1]):getEffect("Levitate").magnitude > 0

    if playerFlying then
        local selfFlying = types.Actor.activeEffects(self):getEffect("Levitate").magnitude > 0
        if not selfFlying then
            types.Actor.spells(self):add("zhac_slavespell_fly")
        end
    else
        local selfFlying = types.Actor.activeEffects(self):getEffect("Levitate").magnitude > 0
        if selfFlying then
            types.Actor.spells(self):remove("zhac_slavespell_fly")
        end
    end
end
local function distToNextPlant()
    print(distanceBetweenPos(self.position, findNextPlant().position))
end
local function onInactive()

end
local function onLoad(data)
    currentAIState = data.currentAIState
end
local function onSave()
    return { currentAIState = currentAIState }
end
local function getPlayer()
    for i, ref in ipairs(nearby.actors) do
        if (ref.type == types.Player) then
            return ref
        end
    end
end
local function equipBracer()
    local eq = types.Actor.getEquipment(self)
    eq[types.Actor.EQUIPMENT_SLOT.LeftGauntlet] = "slave_bracer_left"
    types.Actor.setEquipment(self, eq)
end
local function onInit(data)
    if (data) then
        types.Actor.stats.level(self).current = 870

        if data.newBracer then
            equipBracer()
        end
        I.AI.startPackage({ type = "Wander" })
        self:activateBy(getPlayer())
    end
end

return {
    interfaceName  = "SlaveScript",
    interface      = {
        version = 1,
        findNextPlant = findNextPlant,
        targetObject = targetObject,
        targetPosition = targetPosition,
        onInit = onInit,
        distToNextPlant = distToNextPlant,
    },

    engineHandlers = {
        onInit = onInit,
        onLoad = onLoad,
        onSave = onSave,
        onUpdate = onUpdate,
        onInactive = onInactive,
    },
    eventHandlers  = {
        onLoadEvent = onLoadEvent,
        equipBracer = equipBracer,
        setEquipment = setEquipment,
        setBadItems = setBadItems,
        equipItems = equipItems,
        findValidPlants = findValidPlants,
        findNextPlant = findNextPlant,
    }
}
